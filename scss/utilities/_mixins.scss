//==============================================================================
//-----------------                  Mixins                    -----------------
//==============================================================================

// Media Queries

@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint-sm) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint-md + 1) {
      @content;
    }
  }
}

// Element and Modifier BEM selectors

@mixin e($element) {
	&__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Generate modifier color classes

@mixin m-bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;
            @content;
		}
	}
}

// Mixin used to style grid
@mixin theme-colors($theme-map) {
  @for $i from 1 through $g-col-count {
    &.grid__col--#{$i} {
      background-color: map-get($theme-map, $i);
    }
  }
}

// Flexbox settings

@mixin flex-dir-align($direction: 'row', $align: null) {
  display: flex;
  flex-direction: $direction;
  align-items: $align;
}

// Adjacent sibling margins

@mixin doubly($margin: 1em) {
  & + & {
    margin-left: $margin;
    @content;
  }
}

// Grid Columns

@mixin g-columns {
  @for $i from 2 through $g-col-count {
    $context: ($g-col-width * $g-col-count) + ($g-gutter-width * ($g-col-count - 1)) !global;

    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}
